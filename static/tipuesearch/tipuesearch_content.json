{"pages":[{"title":"NectarJS","text":"NectarJS Javascript's God Mode : one language to rule them all. Code everything, everywhere, for everything, in JS, TS, CS and more. Star Join us on Slack : NectarJS' Slack Get your free key here : NectarJS free Key","tags":"","url":"index.html"},{"title":"The Project","text":"NectarJS Javascript's God Mode : one language to rule them all. Code everything, everywhere, for everything, in JS, TS, CS and more. Star Join us on Slack : NectarJS' Slack Get your free key here : NectarJS free Key","tags":"","url":"en\/The_Project.html"},{"title":"Getting Started","text":"Install You need NodeJS to install NectarJS : https:\/\/nodejs.org\/en\/download\/. Once done, install NectarJS : npm install -g nectarjs Verify that NectarJS is installed with : nectar --help Configuration You need to enter your id and you security key. Code is encrypted in AES during compilation. To set your id, use --setid myid To set your key, use --setkey mykey Basic compilation The simplest way to use NectarJS is : nectar file.js The output file name will be automatically choosen regarding the target. You can specify another output with -o something.out You can select a target for compilation with --target [THE TARGET] The --single argument launch the compilation of the file in argument. If you need to require('') file in your current folder, you need to remove --single to switch to porject mode. NectarJS can run directly your application after compilation if you specify --run. The program will be executed only if the --target match your system. For more informations about compilation output, use --verbose For help, use --help","tags":"","url":"en\/Getting_Started.html"},{"title":"Common","text":"Check syntax You can only check syntax without compilation with argument --check. Project management if --single is not specified, NectarJS will create a project.json file in the project directory. You can create a project.json file without compilation with : nectar --prepare file.js To show a project configuration : nectar --project in the project folder or nectar --project \/path\/to\/projet.json To compile a project, simply call nectar project.json Tips you can enable tips by using --tips. Example : nectar --target arduino-uno --tips arduino.js It will print : [*] Tips : avrdude -p ATMEGA328P -c arduino -P [COMPORT] -b 19200 -F -U flash:w:arduino-arduino-uno.hex","tags":"","url":"en\/Features\/Common.html"},{"title":"Targets","text":"Available targets wasm -&gt; WebAssembly asm-js -&gt; ASM.js wast -&gt; WebAssembly AST linux-x86-32 -&gt; Linux x86 32 bits linux-x86-64 -&gt; Linux x86 64 bits linux-arm32v7 -&gt; Linux arm 32 v7 bits, compatible with Android and Raspberry win-x86-32 -&gt; Windows x86 32 bits win-x86-64 -&gt; Windows x86 64 bits arduino-uno -&gt; Arduino UNO arduino-mega1280 -&gt; Arduino Mega with Atmega 1280 arduino-mega2560 -&gt; Arduino Mega with Atmega 2560","tags":"","url":"en\/Features\/Targets.html"},{"title":"Arduino","text":"Flash You can enable auto-flashing with --flash. To do that, you need avrdude. Installing avrdude On Debian or Ubuntu, just launch : sudo apt-get update &amp;&amp; sudo apt-get install avrdude On Windows, download and install the latest version of Arduino IDE : https:\/\/www.arduino.cc\/en\/Main\/Software ##\u00a0Using --flash The --flash option requires the COM port. Windows example, with USB cable plugged on an Arduino Mega 2560 : nectar --target arduino-mega2560 --flash COM0 arduino.js Debian example, with USB cable plugged on an Arduino Mega 2560 : nectar --target arduino-mega2560 --flash \/dev\/ttyACM0 arduino.js You can get more information using --verbose","tags":"","url":"en\/Features\/Arduino.html"},{"title":"Custom","text":"New module As in NodeJS, you can create a module in a folder and use module.exports to be able to require it. Example : function moduleFunction() { \/*** Your stuff here ***\/ } module.exports = moduleFunction;","tags":"","url":"en\/Modules\/Custom.html"},{"title":"Other Languages","text":"Include C NectarJS let's you include C in your modules. An simple example : myModule\/c\/file.c : var simpleInt() { printf(&quot;In C Function\\n&quot;); return __N_Create_Int(42); } myModule\/index.js : \/\/!_c_include &quot;c\/file.c&quot; console.log(simpleInt());","tags":"","url":"en\/Modules\/Other_Languages.html"},{"title":"O Projeto","text":"NectarJS Javascript's Modo Deus : Uma linguagem para governar todas. Codifique tudo, em todos os lugares, para qualquer coisa, em JS, TS, CS e mais. Star Junte-se a n\u00f3s no Slack : NectarJS' Slack Obtenha sua chave gratuita aqui : NectarJS free Key","tags":"","url":"pt\/O_Projeto.html"},{"title":"Come\u00e7ar","text":"Instala\u00e7\u00e3o \u00c9 necess\u00e1rio possuir NodeJS para instalar o NectarJS : https:\/\/nodejs.org\/en\/download\/. Uma vez feito, instale o NectarJS : npm install -g nectarjs Verifique se o NectarJS est\u00e1 instalado com o comando : nectar --help Configura\u00e7\u00e3o \u00c9 preciso inserir o seu id e o seu security key. O c\u00f3digo \u00e9 encriptado via AES durante a compila\u00e7\u00e3o. Para configurar o seu id, use --setid myid Para configurar a sua key, use --setkey mykey Compila\u00e7\u00e3o b\u00e1sica A forma mais simples de usar o NectarJS : nectar arquivo.js O nome do arquivo de sa\u00edda ser\u00e1 escolhido automaticamente de acordo com o alvo. Voc\u00ea pode especificar outra sa\u00edda com -o something.out Pode selecionar o alvo para a compila\u00e7\u00e3o com --target [THE TARGET] O argumento --single inicia a compila\u00e7\u00e3o do arquivo com o argumento. Se precisar de um arquivo com require('') na sua pasta atual, \u00e9 preciso remover o --single e assim alterar para o modo projeto. O NectarJS pode rodar diretamente a sua aplica\u00e7\u00e3o ap\u00f3s a compila\u00e7\u00e3o se voc\u00ea especificar o --run. O programa ser\u00e1 executado somente se o --target combinar com o seu sistema. Para mais informa\u00e7\u00f5es sobre a sa\u00edda da compila\u00e7\u00e3o, use --verbose Para ajuda, use --help","tags":"","url":"pt\/Come\u00e7ar.html"},{"title":"Comum","text":"Verificar a sintaxe Voc\u00ea pode apenas verificar a sintaxe sem compila\u00e7\u00e3o com argumento --check. Gerenciamento do projeto Se --single n\u00e3o for especificado, NectarJS ir\u00e1 criar um arquivo project.json no diret\u00f3rio do projeto. Voc\u00ea pode criar um arquivo project.json sem compila\u00e7\u00e3o com : nectar --prepare file.js Para exibir a configura\u00e7\u00e3o do projeto : nectar --project na pasta do projeto ou nectar --project \/caminho\/para\/projet.json Para compilar o projeto, simplesmente use nectar project.json Dicas Voc\u00ea pode habilitar dicas usando --tips. Exemplo : nectar --target arduino-uno --tips arduino.js Isso ir\u00e1 exibir : [*] Tips : avrdude -p ATMEGA328P -c arduino -P [COMPORT] -b 19200 -F -U flash:w:arduino-arduino-uno.hex","tags":"","url":"pt\/Caracter\u00edsticas\/Comum.html"},{"title":"Alvos","text":"Alvos dispon\u00edveis wasm -&gt; WebAssembly asm-js -&gt; ASM.js wast -&gt; WebAssembly AST linux-x86-32 -&gt; Linux x86 32 bits linux-x86-64 -&gt; Linux x86 64 bits linux-arm32v7 -&gt; Linux arm 32 v7 bits, compat\u00edvel com Android e Raspberry win-x86-32 -&gt; Windows x86 32 bits win-x86-64 -&gt; Windows x86 64 bits arduino-uno -&gt; Arduino UNO arduino-mega1280 -&gt; Arduino Mega com Atmega 1280 arduino-mega2560 -&gt; Arduino Mega com Atmega 2560","tags":"","url":"pt\/Caracter\u00edsticas\/Alvos.html"},{"title":"Arduino","text":"Flash Voc\u00ea pode habilitar auto-flashing com --flash. Para fazer isso, voc\u00ea precisa do avrdude. Instalando o avrdude No Debian ou Ubuntu, apenas use : sudo apt-get update &amp;&amp; sudo apt-get install avrdude No Windows, fa\u00e7a o download e instale a ultima vers\u00e3o da IDE do Arduino : https:\/\/www.arduino.cc\/en\/Main\/Software ##\u00a0Usando --flash A op\u00e7\u00e3o --flash requer a porta COM. Exemplo do Windows, com cabo USB plugado em um Arduino Mega 2560 : nectar --target arduino-mega2560 --flash COM0 arduino.js Exemplo do Debian, com cabo USB plugado em um Arduino Mega 2560 : nectar --target arduino-mega2560 --flash \/dev\/ttyACM0 arduino.js Voc\u00ea pode obter mais informa\u00e7\u00f5es usando --verbose","tags":"","url":"pt\/Caracter\u00edsticas\/Arduino.html"},{"title":"Customizar","text":"Novo m\u00f3dulo Como no NodeJS, voc\u00ea pode criar um m\u00f3dulo em uma pasta e usar module.exports para ser capaz de requerir o mesmo. Exemplo : function moduleFunction() { \/*** Your stuff here ***\/ } module.exports = moduleFunction;","tags":"","url":"pt\/M\u00f3dulos\/Customizar.html"},{"title":"Outras Linguagens","text":"Incluir C NectarJS permite que voc\u00ea inclua C em seus m\u00f3dulos. Um simples exemplo : myModule\/c\/file.c : var simpleInt() { printf(&quot;In C Function\\n&quot;); return __N_Create_Int(42); } myModule\/index.js : \/\/!_c_include &quot;c\/file.c&quot; console.log(simpleInt());","tags":"","url":"pt\/M\u00f3dulos\/Outras_Linguagens.html"}]}