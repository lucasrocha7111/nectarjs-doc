{"pages":[{"title":"NectarJS","text":"NectarJS Javascript's God Mode : one language to rule them all. Code everything, everywhere, for everything, in JS, TS, CS and more. Star Join us on Slack : NectarJS' Slack Get your free key here : NectarJS free Key","tags":"","url":"index.html"},{"title":"Getting Started","text":"Install You need NodeJS to install NectarJS : https:\/\/nodejs.org\/en\/download\/. Once done, install NectarJS : npm install -g nectarjs Verify that NectarJS is installed with : nectar --help Configuration You need to enter your id and you security key. Code is encrypted in AES during compilation. To set your id, use --setid myid To set your key, use --setkey mykey Basic compilation The simplest way to use NectarJS is : nectar file.js The output file name will be automatically choosen regarding the target. You can specify another output with -o something.out You can select a target for compilation with --target [THE TARGET] The --single argument launch the compilation of the file in argument. If you need to require('') file in your current folder, you need to remove --single to switch to porject mode. NectarJS can run directly your application after compilation if you specify --run. The program will be executed only if the --target match your system. For more informations about compilation output, use --verbose For help, use --help","tags":"","url":"Getting_Started.html"},{"title":"Common","text":"Check syntax You can only check syntax without compilation with argument --check. Project management if --single is not specified, NectarJS will create a project.json file in the project directory. You can create a project.json file without compilation with : nectar --prepare file.js To show a project configuration : nectar --project in the project folder or nectar --project \/path\/to\/projet.json To compile a project, simply call nectar project.json Tips you can enable tips by using --tips. Example : nectar --target arduino-uno --tips arduino.js It will print : [*] Tips : avrdude -p ATMEGA328P -c arduino -P [COMPORT] -b 19200 -F -U flash:w:arduino-arduino-uno.hex","tags":"","url":"Features\/Common.html"},{"title":"Targets","text":"Available targets wasm -&gt; WebAssembly asm-js -&gt; ASM.js wast -&gt; WebAssembly AST linux-x86-32 -&gt; Linux x86 32 bits linux-x86-64 -&gt; Linux x86 64 bits linux-arm32v7 -&gt; Linux arm 32 v7 bits, compatible with Android and Raspberry win-x86-32 -&gt; Windows x86 32 bits win-x86-64 -&gt; Windows x86 64 bits arduino-uno -&gt; Arduino UNO arduino-mega1280 -&gt; Arduino Mega with Atmega 1280 arduino-mega2560 -&gt; Arduino Mega with Atmega 2560","tags":"","url":"Features\/Targets.html"},{"title":"Arduino","text":"Flash You can enable auto-flashing with --flash. To do that, you need avrdude. Installing avrdude On Debian or Ubuntu, just launch : sudo apt-get update &amp;&amp; sudo apt-get install avrdude On Windows, download and install the latest version of Arduino IDE : https:\/\/www.arduino.cc\/en\/Main\/Software ##\u00c2\u00a0Using --flash The --flash option requires the COM port. Windows example, with USB cable plugged on an Arduino Mega 2560 : nectar --target arduino-mega2560 --flash COM0 arduino.js Debian example, with USB cable plugged on an Arduino Mega 2560 : nectar --target arduino-mega2560 --flash \/dev\/ttyACM0 arduino.js You can get more information using --verbose","tags":"","url":"Features\/Arduino.html"},{"title":"Custom","text":"New module As in NodeJS, you can create a module in a folder and use module.exports to be able to require it. Example : function moduleFunction() { \/*** Your stuff here ***\/ } module.exports = moduleFunction;","tags":"","url":"Modules\/Custom.html"},{"title":"Other Languages","text":"Include C NectarJS let's you include C in your modules. An simple example : myModule\/c\/file.c : var simpleInt() { printf(&quot;In C Function\\n&quot;); return __N_Create_Int(42); } myModule\/index.js : \/\/!_c_include &quot;c\/file.c&quot; console.log(simpleInt());","tags":"","url":"Modules\/Other_Languages.html"}]}